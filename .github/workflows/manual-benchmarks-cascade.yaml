name: Automated Cascade of Benchmarks

on:
  repository_dispatch:
    types: [run-benchmark, run-benchmark-cascade]
  workflow_dispatch:
    inputs:
        qdrant_version:
            description: "Version of qdrant to benchmark (tags/v1.6.1, <commit-id>, my-branch, docker/v1.5.1, ghcr/dev)"
            default: ghcr/dev
        dataset:
            description: "Dataset to benchmark"
            default: laion-small-clip
        engine_config:
            description: "Engine config to benchmark"
            default: qdrant-continuous-benchmark
        feature_flags_all:
            type: boolean
            description: "Enable all feature flags (false by default)"
            default: false
        # Inputs to control cascade behavior
        benchmark_set:
            description: "Benchmark set to run (from benchmark-configs.json)"
            default: "smoke_test"
        current_index:
            description: "Current benchmark index in cascade (internal use)"
            default: "0"

jobs:
  runBenchmark:
    name: benchmark - ${{ github.event.client_payload.qdrant_version || inputs.qdrant_version }} - ${{ github.event.client_payload.dataset || inputs.dataset }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      # Load benchmark configurations from file and set current config
      - name: Set benchmark configuration
        id: config
        run: |
          CONFIG_FILE="benchmark-configs.json"

          if [ "${{ github.event_name }}" = "repository_dispatch" ]; then
            # Repository dispatch - get values from payload
            BENCHMARK_SET="${{ github.event.client_payload.benchmark_set }}"
            CURRENT_INDEX=${{ github.event.client_payload.current_index || 0 }}

            echo "qdrant_version=${{ github.event.client_payload.qdrant_version }}" >> $GITHUB_OUTPUT
            echo "dataset=${{ github.event.client_payload.dataset }}" >> $GITHUB_OUTPUT
            echo "engine_config=${{ github.event.client_payload.engine_config }}" >> $GITHUB_OUTPUT
            echo "feature_flags_all=${{ github.event.client_payload.feature_flags_all }}" >> $GITHUB_OUTPUT
            echo "benchmark_set=$BENCHMARK_SET" >> $GITHUB_OUTPUT
            echo "current_index=$CURRENT_INDEX" >> $GITHUB_OUTPUT
          else
            # Workflow dispatch - get benchmark set from input and read from file
            BENCHMARK_SET="${{ inputs.benchmark_set }}"
            CURRENT_INDEX=${{ inputs.current_index || 0 }}

            if [ "$BENCHMARK_SET" = "single" ]; then
              # Single benchmark - use the input values directly
              echo "qdrant_version=${{ inputs.qdrant_version }}" >> $GITHUB_OUTPUT
              echo "dataset=${{ inputs.dataset }}" >> $GITHUB_OUTPUT
              echo "engine_config=${{ inputs.engine_config }}" >> $GITHUB_OUTPUT
              echo "feature_flags_all=${{ inputs.feature_flags_all }}" >> $GITHUB_OUTPUT
              echo "benchmark_set=single" >> $GITHUB_OUTPUT
              echo "current_index=0" >> $GITHUB_OUTPUT
            else
              # Benchmark set - read from config file
              if [ ! -f "$CONFIG_FILE" ]; then
                echo "Configuration file $CONFIG_FILE not found!"
                exit 1
              fi

              if ! jq empty "$CONFIG_FILE" 2>/dev/null; then
                echo "Invalid JSON in $CONFIG_FILE"
                exit 1
              fi

              BENCHMARK_CONFIGS=$(jq -r ".benchmark_sets.\"$BENCHMARK_SET\"" "$CONFIG_FILE")

              if [ "$BENCHMARK_CONFIGS" = "null" ]; then
                echo "Benchmark set '$BENCHMARK_SET' not found in configuration file"
                echo "Available sets:"
                jq -r '.benchmark_sets | keys[]' "$CONFIG_FILE"
                exit 1
              fi

              CURRENT_CONFIG=$(echo "$BENCHMARK_CONFIGS" | jq -r ".[$CURRENT_INDEX]")

              if [ "$CURRENT_CONFIG" = "null" ]; then
                echo "Invalid index $CURRENT_INDEX for benchmark set '$BENCHMARK_SET'"
                exit 1
              fi

              QDRANT_VERSION=$(echo "$CURRENT_CONFIG" | jq -r '.qdrant_version')
              DATASET=$(echo "$CURRENT_CONFIG" | jq -r '.dataset')
              ENGINE_CONFIG=$(echo "$CURRENT_CONFIG" | jq -r '.engine_config')
              FEATURE_FLAGS=$(echo "$CURRENT_CONFIG" | jq -r '.feature_flags_all')

              echo "qdrant_version=$QDRANT_VERSION" >> $GITHUB_OUTPUT
              echo "dataset=$DATASET" >> $GITHUB_OUTPUT
              echo "engine_config=$ENGINE_CONFIG" >> $GITHUB_OUTPUT
              echo "feature_flags_all=$FEATURE_FLAGS" >> $GITHUB_OUTPUT
              echo "benchmark_set=$BENCHMARK_SET" >> $GITHUB_OUTPUT
              echo "current_index=$CURRENT_INDEX" >> $GITHUB_OUTPUT
            fi
          fi

      - name: Run benchmark
        run: |
          export HCLOUD_TOKEN=${{ secrets.HCLOUD_TOKEN }}
          export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
          export QDRANT_VERSION=${{ steps.config.outputs.qdrant_version }}
          export DATASETS=${{ steps.config.outputs.dataset }}
          export ENGINE_NAME=${{ steps.config.outputs.engine_config }}
          export POSTGRES_TABLE=benchmark_manual
          export QDRANT__FEATURE_FLAGS__ALL=${{ steps.config.outputs.feature_flags_all }}
          bash -x tools/setup_ci.sh
          # bash -x tools/run_ci.sh

      # Trigger next benchmark in cascade if there are more to run
      - name: Trigger next benchmark
        if: steps.config.outputs.benchmark_set != 'single'
        run: |
          CONFIG_FILE="benchmark-configs.json"
          BENCHMARK_SET="${{ steps.config.outputs.benchmark_set }}"
          CURRENT_INDEX=${{ steps.config.outputs.current_index }}
          NEXT_INDEX=$((CURRENT_INDEX + 1))

          # Get the benchmark configurations for this set
          BENCHMARK_CONFIGS=$(jq -r ".benchmark_sets.\"$BENCHMARK_SET\"" "$CONFIG_FILE")
          TOTAL_CONFIGS=$(echo "$BENCHMARK_CONFIGS" | jq length)

          echo "Benchmark set: $BENCHMARK_SET"
          echo "Current index: $CURRENT_INDEX"
          echo "Next index: $NEXT_INDEX"
          echo "Total configs: $TOTAL_CONFIGS"

          if [ $NEXT_INDEX -lt $TOTAL_CONFIGS ]; then
            # Get next configuration
            NEXT_CONFIG=$(echo "$BENCHMARK_CONFIGS" | jq -r ".[$NEXT_INDEX]")
            NEXT_QDRANT_VERSION=$(echo "$NEXT_CONFIG" | jq -r '.qdrant_version')
            NEXT_DATASET=$(echo "$NEXT_CONFIG" | jq -r '.dataset')
            NEXT_ENGINE_CONFIG=$(echo "$NEXT_CONFIG" | jq -r '.engine_config')
            NEXT_FEATURE_FLAGS=$(echo "$NEXT_CONFIG" | jq -r '.feature_flags_all')

            echo "ðŸš€ Triggering next benchmark ($NEXT_INDEX/$((TOTAL_CONFIGS-1))):"
            echo "  - qdrant_version: $NEXT_QDRANT_VERSION"
            echo "  - dataset: $NEXT_DATASET"
            echo "  - engine_config: $NEXT_ENGINE_CONFIG"
            echo "  - feature_flags_all: $NEXT_FEATURE_FLAGS"

            # Trigger next benchmark via repository dispatch
            curl -X POST \
              -H "Accept: application/vnd.github.v3+json" \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              https://api.github.com/repos/${{ github.repository }}/dispatches \
              -d "{
                \"event_type\": \"run-benchmark-cascade\",
                \"client_payload\": {
                  \"qdrant_version\": \"$NEXT_QDRANT_VERSION\",
                  \"dataset\": \"$NEXT_DATASET\",
                  \"engine_config\": \"$NEXT_ENGINE_CONFIG\",
                  \"feature_flags_all\": $NEXT_FEATURE_FLAGS,
                  \"benchmark_set\": \"$BENCHMARK_SET\",
                  \"current_index\": $NEXT_INDEX
                }
              }"
          else
            echo "ðŸŽ‰ All benchmarks in set '$BENCHMARK_SET' completed! ($TOTAL_CONFIGS total)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
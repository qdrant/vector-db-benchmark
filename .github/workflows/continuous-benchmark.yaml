name: Continuous Benchmark

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      with_payload:
        description: 'Flag that controls whether to search with or without payload (false or true)'
        default: false
  schedule:
    # Run every 4 hours
    - cron: "0 */4 * * *"

# Restrict to only running this workflow one at a time.
# Any new runs will be queued until the previous run is complete.
# Any existing pending runs will be cancelled and replaced with current run.
concurrency:
  group: continuous-benchmark

jobs:
  runBenchmark:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: webfactory/ssh-agent@v0.8.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Benches
        id: benches
        run: |
            export HCLOUD_TOKEN=${{ secrets.HCLOUD_TOKEN }}
            export POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            export POSTGRES_HOST=${{ secrets.POSTGRES_HOST }}
            export WITH_PAYLOAD=${{ inputs.with_payload }}
            export SUFFIX=$([ "${WITH_PAYLOAD}" = "true" ] && echo "-with-payload" || echo "")

            bash -x tools/setup_ci.sh

            declare -A DATASET_TO_ENGINE
            DATASET_TO_ENGINE["laion-small-clip"]="qdrant-continuous-benchmark${SUFFIX}"
            DATASET_TO_ENGINE["msmarco-sparse-100K"]="qdrant-sparse-vector${SUFFIX}"
            DATASET_TO_ENGINE["h-and-m-2048-angular-filters"]="qdrant-continuous-benchmark${SUFFIX}"
            DATASET_TO_ENGINE["dbpedia-openai-100K-1536-angular"]="qdrant-bq-continuous-benchmark${SUFFIX}"

            set +e

            for dataset in "${!DATASET_TO_ENGINE[@]}"; do
              export ENGINE_NAME=${DATASET_TO_ENGINE[$dataset]}
              export DATASETS=$dataset

              # Benchmark the dev branch:
              export QDRANT_VERSION=ghcr/dev
              export QDRANT__FEATURE_FLAGS__ALL=true

              echo "qdrant_version=${QDRANT_VERSION}" >> $GITHUB_OUTPUT
              echo "engine_name=${ENGINE_NAME}" >> $GITHUB_OUTPUT
              echo "dataset=${DATASETS}" >> $GITHUB_OUTPUT

              echo "failed=error" >> $GITHUB_OUTPUT

            done

            set -e
      - name: Fail job if any of the benches failed
        if: steps.benches.outputs.failed == 'error' || steps.benches.outputs.failed == 'timeout'
        run: exit 1
      - uses: ./.github/workflows/actions/send-slack-msg
        if: failure() || cancelled()
        with:
          source_name: "runBenchmark"
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.CI_ALERTS_CHANNEL_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
